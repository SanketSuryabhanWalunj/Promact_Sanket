// <auto-generated />
using System;
using LakePulse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LakePulse.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527094226_Add_DataPartner_Table")]
    partial class Add_DataPartner_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LakePulse.Models.AlertCategorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CategoryLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DefaultLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AlertCategories");
                });

            modelBuilder.Entity("LakePulse.Models.AlertLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LevelColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LevelLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlertLevels");
                });

            modelBuilder.Entity("LakePulse.Models.AlertLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlertText")
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LakePulseId")
                        .HasColumnType("integer");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AlertLogs");
                });

            modelBuilder.Entity("LakePulse.Models.AlertPreference", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<bool>("ReceiveNewCategories")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendSMS")
                        .HasColumnType("boolean");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("AlertPreferences");
                });

            modelBuilder.Entity("LakePulse.Models.AlertPreferencesCategorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "CategoryId")
                        .IsUnique();

                    b.ToTable("AlertPreferencesCategories");
                });

            modelBuilder.Entity("LakePulse.Models.AlertPreferencesLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer");

                    b.Property<bool>("Selected")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "LevelId")
                        .IsUnique();

                    b.ToTable("AlertPreferencesLevels");
                });

            modelBuilder.Entity("LakePulse.Models.DataHubEditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FeatureId")
                        .HasColumnType("text");

                    b.Property<string>("LakePulseId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValue")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataHubEditLog", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.DataPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LakePulseId")
                        .HasColumnType("integer");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Participation")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LakePulseId", "Name")
                        .IsUnique();

                    b.ToTable("DataPartners");
                });

            modelBuilder.Entity("LakePulse.Models.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DataSourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("LakePulseId")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataSouces");
                });

            modelBuilder.Entity("LakePulse.Models.FavouriteCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CharacteristicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserLakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserLakeId");

                    b.ToTable("FavouriteCharacteristic", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.Features", b =>
                {
                    b.Property<string>("feature_id")
                        .HasColumnType("text");

                    b.Property<string>("allowed_categories")
                        .HasColumnType("text");

                    b.Property<char?>("bound_type")
                        .HasColumnType("character(1)");

                    b.Property<string>("category")
                        .HasColumnType("text");

                    b.Property<string>("data_source")
                        .HasColumnType("text");

                    b.Property<string>("data_type")
                        .HasColumnType("text");

                    b.Property<int?>("decimal_rounding")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int?>("editable")
                        .HasColumnType("integer");

                    b.Property<string>("field_id")
                        .HasColumnType("text");

                    b.Property<string>("label")
                        .HasColumnType("text");

                    b.Property<double?>("lower_bound")
                        .HasColumnType("double precision");

                    b.Property<double?>("lower_limit")
                        .HasColumnType("double precision");

                    b.Property<string>("measurement_characteristic_id")
                        .HasColumnType("text");

                    b.Property<int?>("order_in_category")
                        .HasColumnType("integer");

                    b.Property<int?>("text_max_length")
                        .HasColumnType("integer");

                    b.Property<string>("units")
                        .HasColumnType("text");

                    b.Property<double?>("upper_bound")
                        .HasColumnType("double precision");

                    b.Property<double?>("upper_limit")
                        .HasColumnType("double precision");

                    b.HasKey("feature_id");

                    b.ToTable("features");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AlertCategorieId")
                        .HasColumnType("integer");

                    b.Property<int?>("AlertLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FieldNoteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAlert")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReplay")
                        .HasColumnType("boolean");

                    b.Property<string>("LakeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldNoteId");

                    b.ToTable("FieldNote", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.FieldNoteLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldNoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldNoteId");

                    b.ToTable("FieldNoteLike", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.LakeAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LakeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LakeState")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LakeAdmin");
                });

            modelBuilder.Entity("LakePulse.Models.LakeSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("text");

                    b.Property<string>("LakeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasColumnType("text");

                    b.Property<string>("ProductPrice")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubscriptionEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TotalPrice")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VariantId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LakeSubscription");
                });

            modelBuilder.Entity("LakePulse.Models.ToolboxPurchases", b =>
                {
                    b.Property<int>("lp_trans_no")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("lp_trans_no"));

                    b.Property<string>("api_key")
                        .HasColumnType("text");

                    b.Property<string>("item_label")
                        .HasColumnType("text");

                    b.Property<string>("item_sku")
                        .HasColumnType("text");

                    b.Property<int?>("lakepulse_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("last_data_collected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("location_id")
                        .HasColumnType("text");

                    b.Property<decimal?>("price")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("purchase_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("registration_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("user_email")
                        .HasColumnType("text");

                    b.Property<string>("vendor_device_id")
                        .HasColumnType("text");

                    b.Property<string>("vendor_id")
                        .HasColumnType("text");

                    b.Property<string>("vendor_trans_id")
                        .HasColumnType("text");

                    b.HasKey("lp_trans_no");

                    b.ToTable("toolbox_purchases", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.UserLake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LakeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LakeState")
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserLake", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("LakePulse.Models.FavouriteCharacteristic", b =>
                {
                    b.HasOne("LakePulse.Models.UserLake", "UserLake")
                        .WithMany("FavouriteCharacteristics")
                        .HasForeignKey("UserLakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLake");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNote", b =>
                {
                    b.HasOne("LakePulse.Models.FieldNote", "ParentFieldNote")
                        .WithMany()
                        .HasForeignKey("FieldNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentFieldNote");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNoteLike", b =>
                {
                    b.HasOne("LakePulse.Models.FieldNote", "FieldNote")
                        .WithMany("FieldNoteLike")
                        .HasForeignKey("FieldNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldNote");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNote", b =>
                {
                    b.Navigation("FieldNoteLike");
                });

            modelBuilder.Entity("LakePulse.Models.UserLake", b =>
                {
                    b.Navigation("FavouriteCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
