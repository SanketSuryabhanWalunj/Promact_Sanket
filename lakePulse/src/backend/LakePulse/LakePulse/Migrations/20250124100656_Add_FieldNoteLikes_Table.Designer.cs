// <auto-generated />
using System;
using LakePulse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LakePulse.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250124100656_Add_FieldNoteLikes_Table")]
    partial class Add_FieldNoteLikes_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LakePulse.Models.FavouriteCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CharacteristicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserLakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserLakeId");

                    b.ToTable("FavouriteCharacteristic", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.FieldNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FieldNoteId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsReplay")
                        .HasColumnType("boolean");

                    b.Property<string>("LakeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldNoteId");

                    b.ToTable("FieldNote", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.FieldNoteLike", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldNoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FieldNoteId");

                    b.ToTable("FieldNoteLike", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.UserLake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LakeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastUpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserLake", (string)null);
                });

            modelBuilder.Entity("LakePulse.Models.FavouriteCharacteristic", b =>
                {
                    b.HasOne("LakePulse.Models.UserLake", "UserLake")
                        .WithMany("FavouriteCharacteristics")
                        .HasForeignKey("UserLakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLake");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNote", b =>
                {
                    b.HasOne("LakePulse.Models.FieldNote", "ParentFieldNote")
                        .WithMany()
                        .HasForeignKey("FieldNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentFieldNote");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNoteLike", b =>
                {
                    b.HasOne("LakePulse.Models.FieldNote", "FieldNote")
                        .WithMany("FieldNoteLike")
                        .HasForeignKey("FieldNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldNote");
                });

            modelBuilder.Entity("LakePulse.Models.FieldNote", b =>
                {
                    b.Navigation("FieldNoteLike");
                });

            modelBuilder.Entity("LakePulse.Models.UserLake", b =>
                {
                    b.Navigation("FavouriteCharacteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
